generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model admins {
  id             Int       @id @default(autoincrement())
  email          String    @unique @db.VarChar(255)
  password_hash  String    @db.VarChar(255)
  full_name      String    @db.VarChar(255)
  role           String?   @default("admin") @db.VarChar(100)
  is_super_admin Boolean?  @default(false)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  last_login     DateTime? @db.Timestamptz(6)
}

model business_accounts {
  id                Int               @id @default(autoincrement())
  business_id       Int
  currency          String?           @default("GEL") @db.VarChar(10)
  balance           Decimal?          @default(0.00) @db.Decimal(15, 2)
  business_profiles business_profiles @relation(fields: [business_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model business_favorites {
  id                Int               @id @default(autoincrement())
  business_id       Int
  creator_id        Int
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  business_profiles business_profiles @relation(fields: [business_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  creator_profiles  creator_profiles  @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([business_id, creator_id])
}

model business_profiles {
  user_id                  Int                  @id
  company_name             String               @db.VarChar(255)
  business_email           String?              @db.VarChar(255)
  phone                    String?              @db.VarChar(50)
  website_url              String?              @db.VarChar(255)
  logo_url                 String?              @db.VarChar(500)
  description              String?
  max_tags_allowed         Int?                 @default(10)
  created_at               DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?            @default(now()) @db.Timestamptz(6)
  business_employee_range  String?              @db.VarChar(100)
  business_industry_name   business_industry?
  legal_status             legal_status?
  location                 String?              @db.VarChar(255)
  business_cover_image_url String?              @db.VarChar(255)
  business_accounts        business_accounts[]
  business_favorites       business_favorites[]
  users                    users                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  business_tags            business_tags[]
  campaigns                campaigns[]

  @@index([user_id], map: "idx_business_profiles_user_id")
}

model business_tags {
  business_id       Int
  tag_id            Int
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  business_profiles business_profiles @relation(fields: [business_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  tags              tags              @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([business_id, tag_id])
}

model campaign_analytics {
  id                     Int       @id @default(autoincrement())
  campaign_id            Int
  total_videos           Int?      @default(0)
  total_views            Int?      @default(0)
  total_engagement       Int?      @default(0)
  total_reach            Int?      @default(0)
  total_spent            Decimal?  @default(0.00) @db.Decimal(15, 2)
  participating_creators Int?      @default(0)
  snapshot_date          DateTime  @db.Date
  created_at             DateTime? @default(now()) @db.Timestamptz(6)
  campaigns              campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([campaign_id, snapshot_date])
  @@index([campaign_id, snapshot_date], map: "idx_campaign_analytics_date")
}

model campaign_assets {
  id          Int       @id @default(autoincrement())
  campaign_id Int
  asset_name  String    @db.VarChar(255)
  asset_url   String    @db.VarChar(500)
  asset_type  String?   @db.VarChar(50)
  file_size   BigInt?
  uploaded_at DateTime? @default(now()) @db.Timestamptz(6)
  campaigns   campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model campaign_budget_tracking {
  id               Int       @id @default(autoincrement())
  campaign_id      Int
  total_budget     Decimal   @db.Decimal(15, 2)
  spent_amount     Decimal?  @default(0.00) @db.Decimal(15, 2)
  remaining_budget Decimal?  @default(dbgenerated("(total_budget - spent_amount)")) @db.Decimal(15, 2)
  last_updated     DateTime? @default(now()) @db.Timestamptz(6)
  campaigns        campaigns @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model campaign_participants {
  id               Int                   @id @default(autoincrement())
  campaign_id      Int
  creator_id       Int
  status           participation_status? @default(pending)
  applied_at       DateTime?             @default(now()) @db.Timestamptz(6)
  approved_at      DateTime?             @db.Timestamptz(6)
  approved_by      Int?
  rejection_reason String?
  users            users?                @relation(fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  campaigns        campaigns             @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  creator_profiles creator_profiles      @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([campaign_id, creator_id])
  @@index([status], map: "idx_campaign_participants_status")
}

model campaign_platforms {
  campaign_id Int
  platform    social_platform
  campaigns   campaigns       @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([campaign_id, platform])
}

model campaign_tags {
  campaign_id Int
  tag_id      Int
  campaigns   campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags        tags      @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([campaign_id, tag_id])
  @@index([campaign_id], map: "idx_campaign_tags_campaign")
  @@index([tag_id], map: "idx_campaign_tags_tag")
}

model campaign_videos {
  id                 Int                  @id @default(autoincrement())
  campaign_id        Int
  creator_id         Int
  title              String               @db.VarChar(255)
  description        String?
  video_url          String               @db.VarChar(500)
  cover_url          String?              @db.VarChar(500)
  duration_seconds   Int?
  file_size          BigInt?
  status             video_status?        @default(under_review)
  submitted_at       DateTime?            @db.Timestamptz(6)
  reviewed_at        DateTime?            @db.Timestamptz(6)
  reviewed_by        Int?
  review_comments    String?
  posted_to_social   Boolean?             @default(false)
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  campaigns          campaigns            @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  creator_profiles   creator_profiles     @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  users              users?               @relation(fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  video_analytics    video_analytics[]
  video_social_posts video_social_posts[]

  @@index([campaign_id], map: "idx_campaign_videos_campaign_id")
  @@index([creator_id], map: "idx_campaign_videos_creator_id")
  @@index([status], map: "idx_campaign_videos_status")
}

model campaigns {
  id                       Int                        @id @default(autoincrement())
  business_id              Int
  name                     String                     @db.VarChar(255)
  description              String?
  budget                   Decimal                    @db.Decimal(15, 2)
  budget_hidden            Boolean?                   @default(false)
  duration_days            Int
  finish_date              DateTime                   @db.Date
  status                   campaign_status?           @default(draft)
  chat_type                chat_type?                 @default(public)
  target_creator_types     creator_type[]
  additional_requirements  String?
  payment_type             payment_type
  payment_amount           Decimal                    @db.Decimal(10, 2)
  payment_per_quantity     Int
  requirements             String
  target_audience          String?
  campaign_image_url       String?                    @db.VarChar(500)
  start_date               DateTime?                  @db.Timestamptz(6)
  end_date                 DateTime?                  @db.Timestamptz(6)
  created_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  campaign_analytics       campaign_analytics[]
  campaign_assets          campaign_assets[]
  campaign_budget_tracking campaign_budget_tracking[]
  campaign_participants    campaign_participants[]
  campaign_platforms       campaign_platforms[]
  campaign_tags            campaign_tags[]
  campaign_videos          campaign_videos[]
  business_profiles        business_profiles          @relation(fields: [business_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  chat_servers             chat_servers[]

  @@index([business_id], map: "idx_campaigns_business_id")
  @@index([start_date, end_date], map: "idx_campaigns_dates")
  @@index([finish_date], map: "idx_campaigns_finish_date")
  @@index([status], map: "idx_campaigns_status")
}

model chat_channels {
  id              Int           @id @default(autoincrement())
  chat_servers_id Int
  name            String        @db.VarChar(100)
  channel_type    channel_type? @default(other)
  description     String?
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  chat_servers    chat_servers  @relation(fields: [chat_servers_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model chat_memberships {
  id             Int             @id @default(autoincrement())
  chat_server_id Int
  user_id        Int
  role           chat_role_type? @default(user)
  joined_at      DateTime?       @default(now()) @db.Timestamptz(6)
  chat_servers   chat_servers    @relation(fields: [chat_server_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([chat_server_id, user_id])
}

model chat_servers {
  id               Int                @id @default(autoincrement())
  campaign_id      Int
  name             String             @db.VarChar(255)
  description      String?
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  chat_channels    chat_channels[]
  chat_memberships chat_memberships[]
  campaigns        campaigns          @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model creator_accounts {
  id                Int              @id @default(autoincrement())
  creator_id        Int
  currency          String?          @default("GEL") @db.VarChar(3)
  available_balance Decimal?         @default(0.00) @db.Decimal(15, 2)
  creator_profiles  creator_profiles @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model creator_profiles {
  user_id               Int                     @id
  first_name            String                  @db.VarChar(100)
  last_name             String                  @db.VarChar(100)
  nickname              String?                 @db.VarChar(100)
  date_of_birth         DateTime?               @db.Date
  creator_type          creator_type?
  bio                   String?
  profile_image_url     String?                 @db.VarChar(500)
  max_tags_allowed      Int?                    @default(10)
  location              String                  @db.VarChar(255)
  phone                 String?                 @db.VarChar(50)
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @default(now()) @db.Timestamptz(6)
  business_favorites    business_favorites[]
  campaign_participants campaign_participants[]
  campaign_videos       campaign_videos[]
  creator_accounts      creator_accounts[]
  users                 users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  creator_tags          creator_tags[]
  social_media_accounts social_media_accounts[]

  @@index([creator_type], map: "idx_creator_profiles_type")
  @@index([user_id], map: "idx_creator_profiles_user_id")
}

model creator_tags {
  creator_id       Int
  tag_id           Int
  created_at       DateTime?        @default(now()) @db.Timestamptz(6)
  creator_profiles creator_profiles @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  tags             tags             @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([creator_id, tag_id])
  @@index([creator_id], map: "idx_creator_tags_creator")
  @@index([tag_id], map: "idx_creator_tags_tag")
}

model social_media_accounts {
  id               Int              @id @default(autoincrement())
  creator_id       Int
  platform         social_platform
  username         String?          @db.VarChar(255)
  profile_url      String?          @db.VarChar(500)
  access_token     String?
  refresh_token    String?
  token_expires_at DateTime?        @db.Timestamptz(6)
  is_connected     Boolean?         @default(false)
  last_synced      DateTime?        @db.Timestamptz(6)
  created_at       DateTime?        @default(now()) @db.Timestamptz(6)
  creator_profiles creator_profiles @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([creator_id, platform])
  @@index([creator_id, platform], map: "idx_social_media_creator_platform")
}

model tags {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(100)
  description   String?
  business_tags business_tags[]
  campaign_tags campaign_tags[]
  creator_tags  creator_tags[]
}

model transactions {
  id               Int                 @id @default(autoincrement())
  user_id          Int?
  transaction_type transaction_type
  amount           Decimal             @db.Decimal(15, 2)
  currency         String?             @default("GEL") @db.VarChar(10)
  status           transaction_status? @default(pending)
  description      String?
  transaction_date DateTime?           @db.Date
  metadata         Json?
  created_at       DateTime?           @default(now()) @db.Timestamptz(6)
  processed_at     DateTime?           @db.Timestamptz(6)
  users            users?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                        Int                         @id @default(autoincrement())
  email                     String                      @unique @db.VarChar(255)
  password_hash             String                      @db.VarChar(255)
  user_type                 user_type?                  @default(creator)
  email_verified            Boolean?                    @default(false)
  created_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  email_verified_at         DateTime?                   @db.Timestamptz(6)
  business_profiles         business_profiles?
  campaign_participants     campaign_participants[]
  campaign_videos           campaign_videos[]
  chat_memberships          chat_memberships[]
  creator_profiles          creator_profiles?
  email_verification_tokens email_verification_tokens[]
  password_reset_tokens     password_reset_tokens[]
  refresh_tokens            refresh_tokens[]
  transactions              transactions[]

  @@index([email], map: "idx_users_email")
  @@index([user_type], map: "idx_users_type")
}

model refresh_tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token_hash String    @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  revoked_at DateTime? @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_refresh_tokens_user")
  @@index([expires_at], map: "idx_refresh_tokens_expires")
  @@index([token_hash], map: "idx_refresh_tokens_hash")
}

model video_analytics {
  id               Int             @id @default(autoincrement())
  video_id         Int
  platform         social_platform
  views            Int?            @default(0)
  clicks           Int?            @default(0)
  engagement_count Int?            @default(0)
  reach            Int?            @default(0)
  earnings_amount  Decimal?        @default(0.00) @db.Decimal(10, 2)
  snapshot_date    DateTime        @db.Date
  synced_at        DateTime?       @default(now()) @db.Timestamptz(6)
  campaign_videos  campaign_videos @relation(fields: [video_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([video_id, platform, snapshot_date])
  @@index([video_id, platform, snapshot_date], map: "idx_video_analytics_video_platform_date")
}

model video_social_posts {
  id               Int             @id @default(autoincrement())
  video_id         Int
  platform         social_platform
  post_url         String          @db.VarChar(500)
  platform_post_id String?         @db.VarChar(255)
  posted_at        DateTime?       @default(now()) @db.Timestamptz(6)
  campaign_videos  campaign_videos @relation(fields: [video_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([video_id, platform])
  @@index([platform], map: "idx_video_social_posts_platform")
}

model email_verification_tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_email_verification_token")
  @@index([user_id], map: "idx_email_verification_user")
  @@index([expires_at], map: "idx_email_verification_expires")
}

model password_reset_tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_password_reset_token")
  @@index([user_id], map: "idx_password_reset_user")
  @@index([expires_at], map: "idx_password_reset_expires")
}

enum campaign_status {
  draft
  active
  completed
}

enum channel_type {
  general
  announcements
  feedback
  brand_assets
  requirements
  other
}

enum chat_role_type {
  user
  moderator
  admin
}

enum chat_type {
  public
  private
}

enum creator_type {
  beginner
  experienced
  influencer
  clipper
}

enum participation_status {
  pending
  approved
  rejected
}

enum payment_type {
  cost_per_view
  cost_per_click
  cost_per_engagement
  cost_per_reach
}

enum social_platform {
  instagram
  tiktok
  facebook
}

enum transaction_status {
  pending
  completed
  failed
  cancelled
}

enum transaction_type {
  deposit
  withdrawal
  creator_earning
  commission
}

enum user_status {
  active
  inactive
  suspended
}

enum user_type {
  business
  creator
}

enum video_status {
  under_review
  approved
  rejected
}

enum business_industry {
  Manufacturing
  Trade
  Services
  Agriculture
  EcommerceInformation_Technology @map("EcommerceInformation Technology")
  Construction
  Transportation
  Creative_Industries             @map("Creative Industries")
  Marketing
  Other
}

enum legal_status {
  Individual_Entrepreneur @map("Individual Entrepreneur")
  StartupLLC
  Joint_Stock_Company     @map("Joint Stock Company")
  CooperativeOther
}
